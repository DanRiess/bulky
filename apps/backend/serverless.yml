# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: coffice
# "service" is the name of this project. This will also be added to your AWS resource names.
service: bulkyPoeApi

stages:
  default:
    params:
      oauthTableName: "oauth-table-${sls:stage}"
      offerTableName: "offer-table-${sls:stage}"
      userTableName: "user-table-${sls:stage}"

provider:
  name: aws
  runtime: nodejs20.x
  region: ap-southeast-1
  httpApi:
    payload: "2.0"
    disableDefaultEndpoint: false
    authorizers:
      customAuthorizer:
        type: request
        identitySource: ["$request.header.Authorization"]
        functionName: authorizer
        enableSimpleResponses: true
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:BatchWriteItem
          Resource:
            - Fn::GetAtt: [OauthTable, Arn]
            - Fn::GetAtt: [OfferTable, Arn]
            - Fn::GetAtt: [UserTable, Arn]
        - Effect: Allow
          Action:
            - kms:Sign
            - kms:Verify
          Resource:
            - arn:aws:kms:${env:AWS_REGION}:${env:AWS_ACCOUNT_ID}:key/${env:AWS_SIGNATURE_KEY_ID}
  # Upload your env variables into cloud formation to access in lambdas.
  # Read them in from your .env file, so you don't have to share them.
  environment:
    # DynamoDB Tables
    OAUTH_TABLE: ${param:oauthTableName} # can be accessed in a ts script via process.env.OAUTH_TABLE
    OFFER_TABLE: ${param:offerTableName}
    USER_TABLE: ${param:userTableName}

    # AWS Variables
    # AWS_REGION: ${env:AWS_REGION} # is apparently already available globally
    AWS_ACCOUNT_ID: ${env:AWS_ACCOUNT_ID}
    AWS_SIGNATURE_KEY_ID: ${env:AWS_SIGNATURE_KEY_ID}

    # OAuth Variables
    USER_AGENT: ${env:USER_AGENT}
    OAUTH_CLIENT_ID: ${env:OAUTH_CLIENT_ID}
    OAUTH_REDIRECT_URI: ${env:OAUTH_REDIRECT_URI}

    # GGG Variables
    POE_OAUTH_TOKEN_URL: ${env:POE_OAUTH_TOKEN_URL}
    POE_SERVER_ENDPOINT: ${env:POE_SERVER_ENDPOINT}

package:
  artifact: dist/package.zip

# Even though all files are in /dist, we are uploading the package.zip. All paths start relative from there.
# For dev mode, we want to access files in the /src directory, which is passed as command line argument.
functions:
  oauth_transferState:
    handler: ${env:SOURCE_DIRECTORY, ''}endpoints/oauth/transferState.transferState
    events:
      - httpApi:
          path: /oauth/transfer-state
          method: post

  oauth_transferCodeVerifier:
    handler: ${env:SOURCE_DIRECTORY, ''}endpoints/oauth/transferCodeVerifier.transferCodeVerifier
    events:
      - httpApi:
          path: /oauth/transfer-code-verifier
          method: post

  oauth_handleRedirect:
    handler: ${env:SOURCE_DIRECTORY, ''}endpoints/oauth/handleRedirect.handleRedirect
    events:
      - httpApi:
          path: /oauth/handle-redirect/poe
          method: get

  oauth_signGGGTokenResponse:
    handler: ${env:SOURCE_DIRECTORY, ''}endpoints/oauth/signGGGTokenResponse.signGGGTokenResponse
    events:
      - httpApi:
          path: /oauth/sign-ggg-token-response
          method: post

  oauth_getRefreshToken:
    handler: ${env:SOURCE_DIRECTORY, ''}endpoints/oauth/getRefreshToken.getRefreshToken
    events:
      - httpApi:
          path: /oauth/get-refresh-token
          method: get
          authorizer:
            name: customAuthorizer

  offer_put:
    handler: ${env:SOURCE_DIRECTORY, ''}endpoints/offers/putOffer.putOffer
    events:
      - httpApi:
          path: /offer
          method: put
          authorizer:
            name: customAuthorizer

  offer_getByCategoryAndLeague:
    handler: ${env:SOURCE_DIRECTORY, ''}endpoints/offers/getByCategoryAndLeague.getByCategoryAndLeague
    events:
      - httpApi:
          path: /offer
          method: get

  offer_delete:
    handler: ${env:SOURCE_DIRECTORY, ''}endpoints/offers/deleteOffer.deleteOffer
    events:
      - httpApi:
          path: /offer
          method: delete
          authorizer:
            name: customAuthorizer

  authorizer:
    handler: ${env:SOURCE_DIRECTORY, ''}utility/lambdaAuthorizer.authorize
  # api:
  #   handler: dist/handlerWithDynamo.handler
  #   events:
  #     - httpApi: "*"
resources:
  Resources:
    OauthTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${param:oauthTableName}
        AttributeDefinitions:
          - AttributeName: state
            AttributeType: S
        KeySchema:
          - AttributeName: state
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    OfferTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${param:offerTableName}
        AttributeDefinitions:
          - AttributeName: categoryLeague
            AttributeType: S
          - AttributeName: timestampUuid
            AttributeType: S
        KeySchema:
          - AttributeName: categoryLeague
            KeyType: HASH
          - AttributeName: timestampUuid
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST # Use On-Demand billing for scalability
        TimeToLiveSpecification:
          Enabled: true
          AttributeName: ttlTimestamp # DynamoDB will delete items based on this field

    UserTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${param:userTableName}
        AttributeDefinitions:
          - AttributeName: userUuid
            AttributeType: S
          - AttributeName: username
            AttributeType: S
        KeySchema:
          - AttributeName: userUuid
            KeyType: HASH
          - AttributeName: username
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
