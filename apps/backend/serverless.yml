# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: coffice
# "service" is the name of this project. This will also be added to your AWS resource names.
service: bulkyPoeApi

stages:
  default:
    params:
      oauthTableName: "oauth-table-default"
      offerTableName: "offer-table-default"
      userTableName: "user-table-default"
      ninjaProxyBucketName: "ninja-proxy-bucket-default"
  dev:
    params:
      oauthTableName: "oauth-table-dev"
      offerTableName: "offer-table-dev"
      userTableName: "user-table-dev"
      ninjaProxyBucketName: "ninja-proxy-bucket-dev"
  prod:
    params:
      oauthTableName: "oauth-table-prod"
      offerTableName: "offer-table-prod"
      userTableName: "user-table-prod"
      ninjaProxyBucketName: "ninja-proxy-bucket-prod"

provider:
  name: aws
  runtime: nodejs20.x
  region: ap-southeast-1
  httpApi:
    payload: "2.0"
    disableDefaultEndpoint: false
    authorizers:
      customAuthorizer:
        type: request
        identitySource: ["$request.header.Authorization"]
        functionName: authorizer
        enableSimpleResponses: true
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:BatchWriteItem
          Resource:
            - Fn::GetAtt: [OauthTable, Arn]
            - Fn::GetAtt: [OfferTable, Arn]
            - Fn::GetAtt: [UserTable, Arn]

        - Effect: Allow
          Action:
            - kms:Sign
            - kms:Verify
          Resource:
            - arn:aws:kms:${env:AWS_REGION}:${env:AWS_ACCOUNT_ID}:key/${env:AWS_SIGNATURE_KEY_ID}

        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:GetObject
          # Resource: "arn:aws:s3:::${param:ninjaProxyBucketName}/*"
          Resource:
            - Fn::GetAtt: [NinjaProxyBucket, Arn]
            - Fn::Sub: "${NinjaProxyBucket.Arn}/*"

        - Effect: Allow
          Action:
            - cloudformation:DescribeStacks
            - cloudformation:ListStackResources
          Resource: "*"

  # Upload your env variables into cloud formation to access in lambdas.
  # Read them in from your .env file, so you don't have to share them.
  environment:
    # DynamoDB Tables
    OAUTH_TABLE: ${param:oauthTableName} # can be accessed in a ts script via process.env.OAUTH_TABLE
    OFFER_TABLE: ${param:offerTableName}
    USER_TABLE: ${param:userTableName}
    NINJA_PROXY_BUCKET: ${param:ninjaProxyBucketName}

    # AWS Variables
    # AWS_REGION: ${env:AWS_REGION} # is apparently already available globally
    AWS_ACCOUNT_ID: ${env:AWS_ACCOUNT_ID}
    AWS_SIGNATURE_KEY_ID: ${env:AWS_SIGNATURE_KEY_ID}

    # OAuth Variables
    USER_AGENT: ${env:USER_AGENT}
    OAUTH_CLIENT_ID: ${env:OAUTH_CLIENT_ID}
    OAUTH_REDIRECT_URI: ${env:OAUTH_REDIRECT_URI}

    # GGG Variables
    POE_OAUTH_TOKEN_URL: ${env:POE_OAUTH_TOKEN_URL}
    POE_SERVER_ENDPOINT: ${env:POE_SERVER_ENDPOINT}

package:
  artifact: dist/package.zip

# Even though all files are in /dist, we are uploading the package.zip. All paths start relative from there.
# For dev mode, we want to access files in the /src directory, which is passed as command line argument.
functions:
  oauth_signGGGTokenResponse:
    handler: ${env:SOURCE_DIRECTORY, ''}endpoints/oauth/signGGGTokenResponse.signGGGTokenResponse
    events:
      - httpApi:
          path: /oauth/sign-ggg-token-response
          method: post

  oauth_getRefreshToken:
    handler: ${env:SOURCE_DIRECTORY, ''}endpoints/oauth/getRefreshToken.getRefreshToken
    events:
      - httpApi:
          path: /oauth/get-refresh-token
          method: get
          authorizer:
            name: customAuthorizer

  offer_put:
    handler: ${env:SOURCE_DIRECTORY, ''}endpoints/offers/putOffer.putOffer
    events:
      - httpApi:
          path: /offer
          method: put
          authorizer:
            name: customAuthorizer

  offer_getByCategoryAndLeague:
    handler: ${env:SOURCE_DIRECTORY, ''}endpoints/offers/getByCategoryAndLeague.getByCategoryAndLeague
    events:
      - httpApi:
          path: /offer
          method: get
          authorizer:
            name: customAuthorizer

  offer_delete:
    handler: ${env:SOURCE_DIRECTORY, ''}endpoints/offers/deleteOffer.deleteOffer
    events:
      - httpApi:
          path: /offer
          method: delete
          authorizer:
            name: customAuthorizer

  cron_updateNinjaData:
    handler: ${env:SOURCE_DIRECTORY, ''}cron/updateNinjaData.updateNinjaData
    timeout: 10
    events:
      - schedule:
          rate: rate(1 hour) # Runs once per hour
          enabled: true

  authorizer:
    handler: ${env:SOURCE_DIRECTORY, ''}utility/lambdaAuthorizer.authorize

resources:
  Resources:
    OauthTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${param:oauthTableName}
        AttributeDefinitions:
          - AttributeName: state
            AttributeType: S
        KeySchema:
          - AttributeName: state
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    OfferTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${param:offerTableName}
        AttributeDefinitions:
          - AttributeName: categoryLeague
            AttributeType: S
          - AttributeName: timestampUuid
            AttributeType: S
        KeySchema:
          - AttributeName: categoryLeague
            KeyType: HASH
          - AttributeName: timestampUuid
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST # Use On-Demand billing for scalability
        TimeToLiveSpecification:
          Enabled: true
          AttributeName: ttlTimestamp # DynamoDB will delete items based on this field

    UserTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${param:userTableName}
        AttributeDefinitions:
          - AttributeName: userUuid
            AttributeType: S
          - AttributeName: username
            AttributeType: S
        KeySchema:
          - AttributeName: userUuid
            KeyType: HASH
          - AttributeName: username
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

    # Bucket for storing processed ninja data.
    NinjaProxyBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${param:ninjaProxyBucketName} # ignore error, but make sure that this name only contains lowercase characters!
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
        OwnershipControls:
          Rules:
            - ObjectOwnership: BucketOwnerEnforced

    S3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: { Ref: NinjaProxyBucket }
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                AWS:
                  Fn::Join:
                    - ""
                    - - "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity "
                      - { Ref: CloudFrontOriginAccessIdentity }
              Action:
                - s3:GetObject
                - s3:PutObject
              Resource:
                Fn::Sub: "arn:aws:s3:::${param:ninjaProxyBucketName}/*"

    CloudFrontCachePolicy:
      Type: AWS::CloudFront::CachePolicy
      Properties:
        CachePolicyConfig:
          Name: ninja-proxy-cache-policy
          DefaultTTL: 3600 # 60 minutes
          MaxTTL: 86400 # 1 day
          MinTTL: 1800 # 30 minutes
          ParametersInCacheKeyAndForwardedToOrigin:
            EnableAcceptEncodingBrotli: true
            EnableAcceptEncodingGzip: true
            HeadersConfig:
              HeaderBehavior: none
            CookiesConfig:
              CookieBehavior: none
            QueryStringsConfig:
              QueryStringBehavior: all # Allows caching based on query params

    CloudFrontResponseHeadersPolicy:
      Type: AWS::CloudFront::ResponseHeadersPolicy
      Properties:
        ResponseHeadersPolicyConfig:
          Name: ninja-proxy-response-policy
          Comment: "Response headers policy for stale-while-revalidate"
          CorsConfig:
            AccessControlAllowOrigins:
              Items: ["asdfwefsdf.com"] # Block web access. Empty list is not allowed.
            AccessControlAllowHeaders:
              Items:
                - "*"
            AccessControlAllowMethods:
              Items:
                - GET
                - HEAD
            AccessControlAllowCredentials: false
            OriginOverride: true
          CustomHeadersConfig:
            Items:
              - Header: Cache-Control
                Value: "max-age=3600, stale-while-revalidate=86400"
                Override: true

    CloudFrontOriginAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: "OAI for CloudFront accessing S3"

    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Enabled: true
          Comment: "CloudFront for serving proxied and processed poe.ninja data."
          # DefaultRootObject: index.html
          Origins:
            - DomainName: "${param:ninjaProxyBucketName}.s3.${env:AWS_REGION}.amazonaws.com"
              Id: S3Origin
              S3OriginConfig:
                OriginAccessIdentity:
                  Fn::Join:
                    - ""
                    - - "origin-access-identity/cloudfront/"
                      - { Ref: CloudFrontOriginAccessIdentity }
          DefaultCacheBehavior:
            TargetOriginId: S3Origin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods:
              - GET
              - HEAD
            CachePolicyId:
              Ref: CloudFrontCachePolicy
            ResponseHeadersPolicyId:
              Ref: CloudFrontResponseHeadersPolicy
            Compress: true
          PriceClass: PriceClass_100
          ViewerCertificate:
            CloudFrontDefaultCertificate: true

  Outputs:
    CloudFrontURL:
      Description: "CloudFront URL to access processed poe.ninja data."
      Value:
        Fn::GetAtt:
          - CloudFrontDistribution
          - DomainName

    CloudFrontOAI:
      Value:
        Ref: CloudFrontOriginAccessIdentity
